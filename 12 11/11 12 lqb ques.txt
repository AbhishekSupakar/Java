Question-1
--------------
Create an Employee class (BLC Class)

Attributes :

names        Return Type
--------        ---------------        
 firstName       :String  
 lastName          :String  
 employeeId     :int  
 salary          :double  
 NoOfProject     :int

Access Modifier : private (for all variables)  

Implement constructors to initialize these properties.

implement calculateSalary() method that will add extra amount in salary based on NoOfProject.

Return Type       : void
Access modifier :public

NoOfProject is more than 5 and less that 10 then add 5000
NoOfProject is more than 10 and less that 20 then add 10000
NoOfProject is more than 20 then add 15000

Take another class Tester (ELC Class) which is having main method and instantiate the Employee object and execute the methods.


Test Case 1:
----------------
Valid Input with Projects Between 6 and 10
Input:

firstName: John
lastName: Doe
employeeId: 101
salary: 50000.00
NoOfProject: 7

Expected Output:

After executing calculateSalary(), the salary should be updated to 55000.00.
Print output showing the updated salary: 55000.00.

Test Case 2:
---------------
 Invalid Number of Projects (Negative Value)
Sample Input:

firstName: Michael
lastName: Johnson
employeeId: 105
salary: 45000.00
NoOfProject: -5

Expected Output:

Print an error message indicating invalid number of projects (e.g., "Number of projects cannot be negative").
Salary remains 45000.00.

------------------
Question - 2
------------------

Design a Cricket Score Board by using following requirements

Take a Class Batter (Business Logic  Class)

Instance variables:

Names        Return Type
---------    ----------------
name        : String
runs                : int
matches        : int
batting_avg    : float.

Access Modifier :public (for all variables)

 Create a no argument constructor that assigns default values to instance variables.
 Create parameterized constructor that accepts name, runs, matches.

Methods :

Method name    : computeBattingAverage
Access Modifier     : public
Return type        : void

This method should print the batting average of the batter by dividing run with matches.

Input: "Sachin", 18000, 463

Output:
Name: Sachin
Batting_Avg: 38.87689

Note:

a. If runs or matches values are negative print 'Error'.
b. If runs are greater than 0 when matches are 0 print 'Error'.

Method name: getStatistics
Return type: void
This method should print the details of the batter.

Input: "Sachin", 18000, 463

Output:
Name: Sachin
Runs: 18000
Matches: 463
Note:
a. If runs or matches values are negative print 'Error'.
b. If runs are greater than 0 when matches are 0 print 'Error'.

Given a class Testing (ELC Class) that contains main method. Use this class to test your code.

Test Case -1 :
-----------------

Invalid Case: Empty name

Sample Input: "", 5000, 100`

Expected Output:

Error: Name cannot be empty.

Test Case-2 :
----------------

Invalid Case: Negative runs

Sample Input: "Rahul", -15000, 300

Expected Output:

Error: Runs and matches must be non-negative.

--------------
Question-3
--------------

Create a class Employee (Business Logic Class)

 Instance Variables:

Names         Type
---------     ----------------
 employeeNumber : int

 employeeName     : String

 employeeSalary    : double

 Access Modifier  :public (for all variables)

 Create a parameterized constructor to initialize all the fields.
 
 Create another class Tester (ELC class)

 which contains main method  which will receive all the instance variable value from BLC class.


 In this ELC class print the following details

 a) If salary is >=60000, Print Employee is a Developer

 b) If salary is >=40000 and <60000 , Print Employee is a Designer

 c) If Salary is <40000 , Print Employee is a Tester


Input:

232, "Naresh Kumar", 43000


Output:

Employee is a Designer


Instruction:

Test Cases :
========

Parameterized Constructor: Checks each input parameter (name, id, fee) for validity.

--> If id is negative, it sets it to 0 and prints an error message like (id must be always positive integer)
--> If fee is negative, it sets it to 0.0 and prints an error message like (Fee cannot be negative)
--> If name is null, it sets it to an empty string and prints an error message.(name must initialize with any default name)


Question - 4
---------------
Design a Book printing System

Create a class  Book (BLC Class)

Attributes :

Name             data type
-------              -----------
title                       : String
author                 :author
price               :double

Access modifier :public(for all variables)

take a constructor to initialize all the variables

Methods :

Method Name    :printDetails
Return type        :void
Access modifier    :public


Method Name    :applyDiscount(double discountPercentage)
Return type        :void
Access modifier    :public


Take Main class (ELC Class) which having in main method  and execute the main method


Test Cases :
--------------

Test Case 1: Applying Invalid Discount (Negative)

Error: Invalid discount percentage.

Title: Effective Java
Author: Joshua Bloch
Price: 14.391

Test Case 2:  Creating Book with Negative Price

Error : Negative Price is not allowed.
Title: Head First Java
Author: Kathy Sierra
Price: 0.0

Test Case 3 : Valid Input
Title: Thinking in Java
Author: Bruce
Price: 4000

After applying 10% discount price is 3600.